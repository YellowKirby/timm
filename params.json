{
  "name": "Timm",
  "tagline": "Immutability helpers with fast reads and acceptable writes",
  "body": "# timm [![Build Status](https://travis-ci.org/guigrpa/timm.svg)](https://travis-ci.org/guigrpa/timm) [![Coverage Status](https://coveralls.io/repos/github/guigrpa/timm/badge.svg?branch=master)](https://coveralls.io/github/guigrpa/timm?branch=master) [![npm version](https://img.shields.io/npm/v/timm.svg)](https://www.npmjs.com/package/timm) \r\nImmutability helpers with fast reads and acceptable writes\r\n\r\n\r\n## Installation\r\n\r\n```\r\n$ npm install --save timm\r\n```\r\n\r\n\r\n## Motivation\r\n\r\nI know, I know... the world does not need yet another immutability library, especially with the likes of [ImmutableJS](http://facebook.github.io/immutable-js/) and [seamless-immutable](https://github.com/rtfeldman/seamless-immutable) around. \r\n\r\nAnd yet... I felt the urge, at least just to cover my limited needs. ImmutableJS is a solid, comprehensive and highly-performant solution, but this power comes at a price: mixing up ImmutableJS's Maps and Lists with your plain objects can cause some friction, and reading those objects (in my case, more often than writing them) is not that convenient.\r\n\r\nOn the other side, seamless-immutable solves the \"friction\" problem by using plain objects and arrays, but seems to have some performance issues (at least in my benchmarks, see below).\r\n\r\nTimm's approach: use plain objects and arrays and provide simple mutation functions that will probably not handle all edge cases. It is by no means a complete solution, but it covers 100% of my use cases and maybe 90% of yours, too. Suggestions are welcome!\r\n\r\n**Important notice:** Timm *does not* freeze the objects it provides. In other words, it doesn't protect you against inadvertently modifying them in your code. I considered deeply freezing all objects with `Object.freeze()`, but it is really slow. Then I considered doing this only in development, but then modifying frozen objects will silently fail in development (unless you `use strict` in your code), and –worse still– succeed in production. Not good. In conclusion, **be careful** (or send me any suggestion!).\r\n\r\n\r\n## Benchmarks\r\n\r\nI prepared an initial benchmarking tool comparing read/write speeds in four cases:\r\n\r\n* In-place editing (mutable)\r\n* ImmutableJS\r\n* Timm\r\n* Seamless-immutable\r\n\r\nAll four solutions are first verified for consistency (the mutable solution obviously does not pass all tests) and then benchmarked. Benchmarks cover reading and writing object attributes at different nesting levels (root level, 2 levels and 5 levels deep), as well as replacing an object in a 1000-long array.\r\n\r\nFeel free to run them yourself (download the repo and then `npm install && npm run benchmarks`). These are my results on a Windows machine for 200k iterations:\r\n\r\n![Benchmarks](https://github.com/guigrpa/timm/blob/master/docs/benchmarks-win7-20160219.png?raw=true)\r\n\r\nSome conclusions from these benchmarks:\r\n\r\n* Reads are on par with native objects/arrays and seamless-immutable, and faster than ImmutableJS (the deeper, the faster). In fact, you cannot go faster than native objects for reading!\r\n\r\n* Writes are much slower than in-place edits, as expected, but are much faster than seamless-immutable (even in production mode), both for objects and arrays. Compared to ImmutableJS, object writes are faster (the deeper, the faster), whereas array writes are way slower. For timm and seamless-immutable, write times degrade linearly with array length (and probably object size), but much more slowly for ImmutableJS (logarithmically?). This is where ImmutableJS really shines.\r\n\r\n* Hence, what I recommend (from top to bottom):\r\n\r\n    - If you don't need immutability, well... just **mutate in peace!** I mean, *in place*\r\n    - If you need a complete, well-tested, rock-solid library and don't mind using a non-native API for reads: use **ImmutableJS**\r\n    - If you value using plain arrays/objects above other considerations, use **timm**\r\n    - If your typical use cases involve much more reading than writing, use **timm** as well\r\n    - If you do a lot of writes, updating items in long arrays or attributes in fat objects, use **ImmutableJS** \r\n\r\n\r\n## Usage\r\n\r\nTimm\r\n (c) Guillermo Grau Panea 2016\r\n License: MIT\r\n\r\n### Arrays\r\n\r\n#### addLast()\r\nReturns a new array with an appended item or items.\r\n\r\nUsage: `addLast(array: Array<any>, val: Array<any>|any): Array<any>`\r\n\r\n```js\r\narr = ['a', 'b']\r\narr2 = addLast(arr, 'c')\r\n// ['a', 'b', 'c']\r\narr2 === arr\r\n// false\r\narr3 = addLast(arr, ['c', 'd'])\r\n// ['a', 'b', 'c', 'd']\r\n```\r\n\r\n#### addFirst()\r\nReturns a new array with a prepended item or items.\r\n\r\nUsage: `addFirst(array: Array<any>, val: Array<any>|any): Array<any>`\r\n\r\n```js\r\narr = ['a', 'b']\r\narr2 = addFirst(arr, 'c')\r\n// ['c', 'a', 'b']\r\narr2 === arr\r\n// false\r\narr3 = addFirst(arr, ['c', 'd'])\r\n// ['c', 'd', 'a', 'b']\r\n```\r\n\r\n#### insert()\r\nReturns a new array obtained by inserting an item or items\r\nat a specified index.\r\n\r\nUsage: `insert(array: Array<any>, idx: number, val: Array<any>|any): Array<any>`\r\n\r\n```js\r\narr = ['a', 'b', 'c']\r\narr2 = insert(arr, 1, 'd')\r\n// ['a', 'd', 'b', 'c']\r\narr2 === arr\r\n// false\r\ninsert(arr, 1, ['d', 'e'])\r\n// ['a', 'd', 'e', 'b', 'c']\r\n```\r\n\r\n#### removeAt()\r\nReturns a new array obtained by removing an item at\r\na specified index.\r\n\r\nUsage: `removeAt(array: Array<any>, idx: number): Array<any>`\r\n\r\n```js\r\narr = ['a', 'b', 'c']\r\narr2 = removeAt(arr, 1)\r\n// ['a', 'c']\r\narr2 === arr\r\n// false\r\n```\r\n\r\n#### replaceAt()\r\nReturns a new array obtained by replacing an item at\r\na specified index. If the provided item is the same\r\n(*referentially equal to*) the previous item at that position,\r\nthe original array is returned.\r\n\r\nUsage: `replaceAt(array: Array<any>, idx: number, newItem: any): Array<any>`\r\n\r\n```js\r\narr = ['a', 'b', 'c']\r\narr2 = replaceAt(arr, 1, 'd')\r\n// ['a', 'd', 'c']\r\narr2 === arr\r\n// false\r\n\r\n// ... but the same object is returned if there are no changes:\r\nreplaceAt(arr, 1, 'b') === arr\r\n// true\r\n```\r\n\r\n### Collections (objects and arrays)\r\n\r\nThe following types are used throughout this section\r\n```js\r\ntype ArrayOrObject = Array<any>|Object;\r\ntype Key = number|string;\r\n```\r\n\r\n#### getIn()\r\nReturns a value from an object at a given path. Works with\r\nnested arrays and objects. If the path does not exist, it returns\r\n`undefined`.\r\n\r\nUsage: `getIn(obj: ?ArrayOrObject, path: Array<Key>): any`\r\n\r\n```js\r\nobj = {a: 1, b: 2, d: {d1: 3, d2: 4}, e: ['a', 'b', 'c']}\r\ngetIn(obj, ['d', 'd1'])\r\n// 3\r\ngetIn(obj, ['e', 1])\r\n// 'b'\r\n```\r\n\r\n#### set()\r\nReturns a new object with a modified attribute.\r\nIf the provided value is the same (*referentially equal to*)\r\nthe previous value, the original object is returned.\r\n\r\nUsage: `set(obj: ?ArrayOrObject, key: Key, val: any): ArrayOrObject`\r\n\r\n```js\r\nobj = {a: 1, b: 2, c: 3}\r\nobj2 = set(obj, 'b', 5)\r\n// {a: 1, b: 5, c: 3}\r\nobj2 === obj\r\n// false\r\n\r\n// ... but the same object is returned if there are no changes:\r\nset(obj, 'b', 2) === obj\r\n// true\r\n```\r\n\r\n#### setIn()\r\nReturns a new object with a modified **nested** attribute.\r\n\r\nNotes:\r\n\r\n* If the provided value is the same (*referentially equal to*)\r\nthe previous value, the original object is returned.\r\n* If the path does not exist, it will be created before setting\r\nthe new value.\r\n\r\nUsage: `setIn(obj: ArrayOrObject, path: Array<Key>, val: any): ArrayOrObject`\r\n\r\n```js\r\nobj = {a: 1, b: 2, d: {d1: 3, d2: 4}, e: {e1: 'foo', e2: 'bar'}}\r\nobj2 = setIn(obj, ['d', 'd1'], 4)\r\n// {a: 1, b: 2, d: {d1: 4, d2: 4}, e: {e1: 'foo', e2: 'bar'}}\r\nobj2 === obj\r\n// false\r\nobj2.d === obj.d\r\n// false\r\nobj2.e === obj.e\r\n// true\r\n\r\n// ... but the same object is returned if there are no changes:\r\nobj3 = setIn(obj, ['d', 'd1'], 3)\r\n// {a: 1, b: 2, d: {d1: 3, d2: 4}, e: {e1: 'foo', e2: 'bar'}}\r\nobj3 === obj\r\n// true\r\nobj3.d === obj.d\r\n// true\r\nobj3.e === obj.e\r\n// true\r\n\r\n// ... unknown paths create intermediate keys:\r\nsetIn({a: 3}, ['unknown', 'path'], 4)\r\n// {a: 3, unknown: {path: 4}}\r\n```\r\n\r\n#### updateIn()\r\nReturns a new object with a modified **nested** attribute,\r\ncalculated via a user-provided callback based on the current value.\r\nIf the calculated value is the same (*referentially equal to*)\r\nthe previous value, the original object is returned.\r\n\r\nUsage: `updateIn(obj: ArrayOrObject, path: Array<Key>, fnUpdate: (prevValue: any) => any): ArrayOrObject`\r\n\r\n```js\r\nobj = {a: 1, d: {d1: 3, d2: 4}}\r\nobj2 = updateIn(obj, ['d', 'd1'], function(val){return val + 1})\r\n// {a: 1, d: {d1: 4, d2: 4}}\r\nobj2 === obj\r\n// false\r\n\r\n// ... but the same object is returned if there are no changes:\r\nobj3 = updateIn(obj, ['d', 'd1'], function(val){return val})\r\n// {a: 1, d: {d1: 3, d2: 4}}\r\nobj3 === obj\r\n// true\r\n```\r\n\r\n#### merge()\r\nReturns a new object built as follows: the overlapping keys from the\r\nsecond one overwrite the corresponding entries from the first one.\r\nSimilar to `Object.assign()`, but immutable.\r\n\r\nUsage:\r\n\r\n* `merge(obj1: ArrayOrObject, obj2: ?ArrayOrObject): ArrayOrObject`\r\n* `merge(obj1: ArrayOrObject, ...objects: Array<?ArrayOrObject>): ArrayOrObject`\r\n\r\nThe unmodified `obj1` is returned if `obj2` does not *provide something\r\nnew to* `obj1`, i.e. if either of the following\r\nconditions are true:\r\n\r\n* `obj2` is `null` or `undefined`\r\n* `obj2` is an object, but it is empty\r\n* All attributes of `obj2` are referentially equal to the\r\n  corresponding attributes of `obj`\r\n\r\n```js\r\nobj1 = {a: 1, b: 2, c: 3}\r\nobj2 = {c: 4, d: 5}\r\nobj3 = merge(obj1, obj2)\r\n// {a: 1, b: 2, c: 4, d: 5}\r\nobj3 === obj1\r\n// false\r\n\r\n// ... but the same object is returned if there are no changes:\r\nmerge(obj1, {c: 3}) === obj1\r\n// true\r\n```\r\n\r\n#### mergeIn()\r\nSimilar to `merge()`, but merging the value at a given nested path.\r\n\r\nUsage:\r\n\r\n* `mergeIn(obj1: ArrayOrObject, path: Array<Key>, obj2: ArrayOrObject): ArrayOrObject`\r\n* `mergeIn(obj1: ArrayOrObject, path: Array<Key>, ...objects: Array<?ArrayOrObject>): ArrayOrObject`\r\n\r\n```js\r\nobj1 = {a: 1, d: {b: {d1: 3, d2: 4}}}\r\nobj2 = {d3: 5}\r\nobj2 = mergeIn(obj1, ['d', 'b'], obj2)\r\n// {a: 1, d: {b: {d1: 3, d2: 4, d3: 5}}}\r\nobj3 === obj1\r\n// false\r\n\r\n// ... but the same object is returned if there are no changes:\r\nmergeIn(obj1, ['d', 'b'], {d2: 4}) === obj1\r\n// true\r\n```\r\n\r\n#### addDefaults()\r\nReturns a new object built as follows: `undefined` keys in the first one\r\nare filled in with the corresponding values from the second one\r\n(even if they are `null`).\r\n\r\nUsage:\r\n\r\n* `addDefaults(obj: ArrayOrObject, defaults: ArrayOrObject): ArrayOrObject`\r\n* `addDefaults(obj: ArrayOrObject, ...defaultObjects: Array<?ArrayOrObject>): ArrayOrObject`\r\n\r\n```js\r\nobj1 = {a: 1, b: 2, c: 3}\r\nobj2 = {c: 4, d: 5, e: null}\r\nobj3 = addDefaults(obj1, obj2)\r\n// {a: 1, b: 2, c: 3, d: 5, e: null}\r\nobj3 === obj1\r\n// false\r\n\r\n// ... but the same object is returned if there are no changes:\r\naddDefaults(obj1, {c: 4}) === obj1\r\n// true\r\n```\r\n\r\n\r\n## MIT license\r\n\r\nCopyright (c) [Guillermo Grau Panea](https://github.com/guigrpa) 2016\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}